
MODULE HandshakeChannel0(running_pid, filleds, receiveds, values_0)
  VAR
    filled : boolean;
    received : boolean;
    value_0 : {Ready, NotReady, Commit, Abort};
  ASSIGN
    init(filled) := FALSE;
    init(received) := FALSE;
    next(filled) := filleds[running_pid];
    next(received) := receiveds[running_pid];
    next(value_0) := values_0[running_pid];

MODULE HandshakeChannel0Proxy(ch)
  VAR
    next_filled : boolean;
    next_received : boolean;
    next_value_0 : {Ready, NotReady, Commit, Abort};
  DEFINE
    filled := ch.filled;
    received := ch.received;
    value_0 := ch.value_0;

MODULE HandshakeChannel1(running_pid, filleds, receiveds, values_0)
  VAR
    filled : boolean;
    received : boolean;
    value_0 : {Ready, NotReady, Commit, Abort};
  ASSIGN
    init(filled) := FALSE;
    init(received) := FALSE;
    next(filled) := filleds[running_pid];
    next(received) := receiveds[running_pid];
    next(value_0) := values_0[running_pid];

MODULE HandshakeChannel1Proxy(ch)
  VAR
    next_filled : boolean;
    next_received : boolean;
    next_value_0 : {Ready, NotReady, Commit, Abort};
  DEFINE
    filled := ch.filled;
    received := ch.received;
    value_0 := ch.value_0;

MODULE HandshakeChannel2(running_pid, filleds, receiveds, values_0)
  VAR
    filled : boolean;
    received : boolean;
    value_0 : {Ready, NotReady, Commit, Abort};
  ASSIGN
    init(filled) := FALSE;
    init(received) := FALSE;
    next(filled) := filleds[running_pid];
    next(received) := receiveds[running_pid];
    next(value_0) := values_0[running_pid];

MODULE HandshakeChannel2Proxy(ch)
  VAR
    next_filled : boolean;
    next_received : boolean;
    next_value_0 : {Ready, NotReady, Commit, Abort};
  DEFINE
    filled := ch.filled;
    received := ch.received;
    value_0 := ch.value_0;

MODULE HandshakeChannel3(running_pid, filleds, receiveds, values_0)
  VAR
    filled : boolean;
    received : boolean;
    value_0 : {Ready, NotReady, Commit, Abort};
  ASSIGN
    init(filled) := FALSE;
    init(received) := FALSE;
    next(filled) := filleds[running_pid];
    next(received) := receiveds[running_pid];
    next(value_0) := values_0[running_pid];

MODULE HandshakeChannel3Proxy(ch)
  VAR
    next_filled : boolean;
    next_received : boolean;
    next_value_0 : {Ready, NotReady, Commit, Abort};
  DEFINE
    filled := ch.filled;
    received := ch.received;
    value_0 := ch.value_0;

MODULE __pid0_Arbiter(running_pid, pid, __elem0_chRecvs, __elem1_chRecvs, __elem0_chSends, __elem1_chSends)
  VAR
    __if_cond_temp : boolean;
    __if_cond_temp_2 : boolean;
    __if_cond_temp_3 : boolean;
    all_ready : boolean;
    next_state : {state0, state1, state10, state11, state12, state13, state14, state15, state16, state17, state18, state19, state2, state20, state21, state22, state23, state24, state25, state26, state27, state28, state29, state3, state30, state31, state32, state4, state5, state6, state7, state8, state9};
    resp : {Ready, NotReady, Commit, Abort};
    resp_2 : {Ready, NotReady, Commit, Abort};
    state : {state0, state1, state10, state11, state12, state13, state14, state15, state16, state17, state18, state19, state2, state20, state21, state22, state23, state24, state25, state26, state27, state28, state29, state3, state30, state31, state32, state4, state5, state6, state7, state8, state9};
  TRANS state = state15 & nextState = state17 -> next(__if_cond_temp_2);
  TRANS state = state15 & nextState = state18 -> !next(__if_cond_temp_2);
  TRANS state = state7 & nextState = state21 -> next(__if_cond_temp_3);
  TRANS state = state7 & nextState = state22 -> !next(__if_cond_temp_3);
  TRANS state = state9 & nextState = state11 -> next(__if_cond_temp);
  TRANS state = state9 & nextState = state12 -> !next(__if_cond_temp);
  ASSIGN
    __elem0_chRecvs.next_filled := __elem0_chRecvs.filled;
    __elem0_chRecvs.next_received :=
      case
        running_pid = pid & state = state8 & next_state = state9 : TRUE;
        TRUE : __elem0_chRecvs.received;
      esac;
    __elem0_chRecvs.next_value_0 := __elem0_chRecvs.value_0;
    __elem0_chSends.next_filled :=
      case
        running_pid = pid & state = state0 & next_state = state2 : TRUE;
        running_pid = pid & state = state2 & next_state = state3 : FALSE;
        running_pid = pid & state = state21 & next_state = state24 : TRUE;
        running_pid = pid & state = state22 & next_state = state29 : TRUE;
        running_pid = pid & state = state24 & next_state = state25 : FALSE;
        running_pid = pid & state = state29 & next_state = state30 : FALSE;
        TRUE : __elem0_chSends.filled;
      esac;
    __elem0_chSends.next_received :=
      case
        running_pid = pid & state = state0 & next_state = state2 : FALSE;
        running_pid = pid & state = state21 & next_state = state24 : FALSE;
        running_pid = pid & state = state22 & next_state = state29 : FALSE;
        TRUE : __elem0_chSends.received;
      esac;
    __elem0_chSends.next_value_0 :=
      case
        running_pid = pid & state = state0 & next_state = state2 : Ready;
        running_pid = pid & state = state21 & next_state = state24 : Commit;
        running_pid = pid & state = state22 & next_state = state29 : Abort;
        TRUE : __elem0_chSends.value_0;
      esac;
    __elem1_chRecvs.next_filled := __elem1_chRecvs.filled;
    __elem1_chRecvs.next_received :=
      case
        running_pid = pid & state = state14 & next_state = state15 : TRUE;
        TRUE : __elem1_chRecvs.received;
      esac;
    __elem1_chRecvs.next_value_0 := __elem1_chRecvs.value_0;
    __elem1_chSends.next_filled :=
      case
        running_pid = pid & state = state25 & next_state = state26 : TRUE;
        running_pid = pid & state = state26 & next_state = state27 : FALSE;
        running_pid = pid & state = state3 & next_state = state4 : TRUE;
        running_pid = pid & state = state30 & next_state = state31 : TRUE;
        running_pid = pid & state = state31 & next_state = state32 : FALSE;
        running_pid = pid & state = state4 & next_state = state5 : FALSE;
        TRUE : __elem1_chSends.filled;
      esac;
    __elem1_chSends.next_received :=
      case
        running_pid = pid & state = state25 & next_state = state26 : FALSE;
        running_pid = pid & state = state3 & next_state = state4 : FALSE;
        running_pid = pid & state = state30 & next_state = state31 : FALSE;
        TRUE : __elem1_chSends.received;
      esac;
    __elem1_chSends.next_value_0 :=
      case
        running_pid = pid & state = state25 & next_state = state26 : Commit;
        running_pid = pid & state = state3 & next_state = state4 : Ready;
        running_pid = pid & state = state30 & next_state = state31 : Abort;
        TRUE : __elem1_chSends.value_0;
      esac;
    init(state) := state0;
    next(__if_cond_temp) :=
      case
        running_pid = pid & state = state9 : resp!=Ready;
        TRUE : __if_cond_temp;
      esac;
    next(__if_cond_temp_2) :=
      case
        running_pid = pid & state = state15 : resp_2!=Ready;
        TRUE : __if_cond_temp_2;
      esac;
    next(__if_cond_temp_3) :=
      case
        running_pid = pid & state = state7 : all_ready;
        TRUE : __if_cond_temp_3;
      esac;
    next(all_ready) :=
      case
        running_pid = pid & state = state1 & next_state = state6 : TRUE;
        running_pid = pid & state = state11 & next_state = state13 : FALSE;
        running_pid = pid & state = state17 & next_state = state19 : FALSE;
        TRUE : all_ready;
      esac;
    next(resp) :=
      case
        running_pid = pid & state = state8 & next_state = state9 : __elem0_chRecvs.value_0;
        TRUE : resp;
      esac;
    next(resp_2) :=
      case
        running_pid = pid & state = state14 & next_state = state15 : __elem1_chRecvs.value_0;
        TRUE : resp_2;
      esac;
    next(state) := next_state;
    next_state :=
      case
        running_pid = pid & state = state0 & ((!(__elem0_chSends.filled))) : {state2};
        running_pid = pid & state = state1 & ((TRUE)) : {state6};
        running_pid = pid & state = state10 & ((TRUE)) : {state14};
        running_pid = pid & state = state11 & ((TRUE)) : {state13};
        running_pid = pid & state = state12 & ((TRUE)) : {state10};
        running_pid = pid & state = state13 & ((TRUE)) : {state10};
        running_pid = pid & state = state14 & ((__elem1_chRecvs.filled & !__elem1_chRecvs.received)) : {state15};
        running_pid = pid & state = state15 : {state17, state18};
        running_pid = pid & state = state16 & ((TRUE)) : {state7};
        running_pid = pid & state = state17 & ((TRUE)) : {state19};
        running_pid = pid & state = state18 & ((TRUE)) : {state16};
        running_pid = pid & state = state19 & ((TRUE)) : {state16};
        running_pid = pid & state = state2 & (((__elem0_chSends.filled) & (__elem0_chSends.received))) : {state3};
        running_pid = pid & state = state21 & ((!(__elem0_chSends.filled))) : {state24};
        running_pid = pid & state = state22 & ((!(__elem0_chSends.filled))) : {state29};
        running_pid = pid & state = state23 & ((TRUE)) : {state20};
        running_pid = pid & state = state24 & (((__elem0_chSends.filled) & (__elem0_chSends.received))) : {state25};
        running_pid = pid & state = state25 & ((!(__elem1_chSends.filled))) : {state26};
        running_pid = pid & state = state26 & (((__elem1_chSends.filled) & (__elem1_chSends.received))) : {state27};
        running_pid = pid & state = state27 & ((TRUE)) : {state23};
        running_pid = pid & state = state28 & ((TRUE)) : {state20};
        running_pid = pid & state = state29 & (((__elem0_chSends.filled) & (__elem0_chSends.received))) : {state30};
        running_pid = pid & state = state3 & ((!(__elem1_chSends.filled))) : {state4};
        running_pid = pid & state = state30 & ((!(__elem1_chSends.filled))) : {state31};
        running_pid = pid & state = state31 & (((__elem1_chSends.filled) & (__elem1_chSends.received))) : {state32};
        running_pid = pid & state = state32 & ((TRUE)) : {state28};
        running_pid = pid & state = state4 & (((__elem1_chSends.filled) & (__elem1_chSends.received))) : {state5};
        running_pid = pid & state = state5 & ((TRUE)) : {state1};
        running_pid = pid & state = state6 & ((TRUE)) : {state8};
        running_pid = pid & state = state7 : {state21, state22};
        running_pid = pid & state = state8 & ((__elem0_chRecvs.filled & !__elem0_chRecvs.received)) : {state9};
        running_pid = pid & state = state9 : {state11, state12};
        TRUE : state;
      esac;

MODULE __pid1_Worker(running_pid, pid, chRecv, chSend)
  VAR
    next_state : {state0, state1, state10, state11, state12, state2, state3, state4, state5, state6, state7, state8, state9};
    resp : {Ready, NotReady, Commit, Abort};
    state : {state0, state1, state10, state11, state12, state2, state3, state4, state5, state6, state7, state8, state9};
  TRANS state = state2 & nextState = state5 -> TRUE;
  TRANS state = state2 & nextState = state9 -> TRUE;
  ASSIGN
    chRecv.next_filled := chRecv.filled;
    chRecv.next_received :=
      case
        running_pid = pid & state = state1 & next_state = state2 : TRUE;
        running_pid = pid & state = state3 & next_state = state12 : TRUE;
        TRUE : chRecv.received;
      esac;
    chRecv.next_value_0 := chRecv.value_0;
    chSend.next_filled :=
      case
        running_pid = pid & state = state10 & next_state = state11 : FALSE;
        running_pid = pid & state = state5 & next_state = state6 : TRUE;
        running_pid = pid & state = state6 & next_state = state7 : FALSE;
        running_pid = pid & state = state9 & next_state = state10 : TRUE;
        TRUE : chSend.filled;
      esac;
    chSend.next_received :=
      case
        running_pid = pid & state = state5 & next_state = state6 : FALSE;
        running_pid = pid & state = state9 & next_state = state10 : FALSE;
        TRUE : chSend.received;
      esac;
    chSend.next_value_0 :=
      case
        running_pid = pid & state = state5 & next_state = state6 : NotReady;
        running_pid = pid & state = state9 & next_state = state10 : Ready;
        TRUE : chSend.value_0;
      esac;
    init(state) := state0;
    next(resp) :=
      case
        running_pid = pid & state = state1 & next_state = state2 : chRecv.value_0;
        running_pid = pid & state = state3 & next_state = state12 : chRecv.value_0;
        TRUE : resp;
      esac;
    next(state) := next_state;
    next_state :=
      case
        running_pid = pid & state = state0 & ((TRUE)) : {state1};
        running_pid = pid & state = state1 & ((chRecv.filled & !chRecv.received)) : {state2};
        running_pid = pid & state = state10 & (((chSend.filled) & (chSend.received))) : {state11};
        running_pid = pid & state = state11 & ((TRUE)) : {state8};
        running_pid = pid & state = state2 : {state5, state9};
        running_pid = pid & state = state3 & ((chRecv.filled & !chRecv.received)) : {state12};
        running_pid = pid & state = state4 & ((TRUE)) : {state3};
        running_pid = pid & state = state5 & ((!(chSend.filled))) : {state6};
        running_pid = pid & state = state6 & (((chSend.filled) & (chSend.received))) : {state7};
        running_pid = pid & state = state7 & ((TRUE)) : {state4};
        running_pid = pid & state = state8 & ((TRUE)) : {state3};
        running_pid = pid & state = state9 & ((!(chSend.filled))) : {state10};
        TRUE : state;
      esac;

MODULE __pid2_Worker(running_pid, pid, chRecv, chSend)
  VAR
    next_state : {state0, state1, state10, state11, state12, state2, state3, state4, state5, state6, state7, state8, state9};
    resp : {Ready, NotReady, Commit, Abort};
    state : {state0, state1, state10, state11, state12, state2, state3, state4, state5, state6, state7, state8, state9};
  TRANS state = state2 & nextState = state5 -> TRUE;
  TRANS state = state2 & nextState = state9 -> TRUE;
  ASSIGN
    chRecv.next_filled := chRecv.filled;
    chRecv.next_received :=
      case
        running_pid = pid & state = state1 & next_state = state2 : TRUE;
        running_pid = pid & state = state3 & next_state = state12 : TRUE;
        TRUE : chRecv.received;
      esac;
    chRecv.next_value_0 := chRecv.value_0;
    chSend.next_filled :=
      case
        running_pid = pid & state = state10 & next_state = state11 : FALSE;
        running_pid = pid & state = state5 & next_state = state6 : TRUE;
        running_pid = pid & state = state6 & next_state = state7 : FALSE;
        running_pid = pid & state = state9 & next_state = state10 : TRUE;
        TRUE : chSend.filled;
      esac;
    chSend.next_received :=
      case
        running_pid = pid & state = state5 & next_state = state6 : FALSE;
        running_pid = pid & state = state9 & next_state = state10 : FALSE;
        TRUE : chSend.received;
      esac;
    chSend.next_value_0 :=
      case
        running_pid = pid & state = state5 & next_state = state6 : NotReady;
        running_pid = pid & state = state9 & next_state = state10 : Ready;
        TRUE : chSend.value_0;
      esac;
    init(state) := state0;
    next(resp) :=
      case
        running_pid = pid & state = state1 & next_state = state2 : chRecv.value_0;
        running_pid = pid & state = state3 & next_state = state12 : chRecv.value_0;
        TRUE : resp;
      esac;
    next(state) := next_state;
    next_state :=
      case
        running_pid = pid & state = state0 & ((TRUE)) : {state1};
        running_pid = pid & state = state1 & ((chRecv.filled & !chRecv.received)) : {state2};
        running_pid = pid & state = state10 & (((chSend.filled) & (chSend.received))) : {state11};
        running_pid = pid & state = state11 & ((TRUE)) : {state8};
        running_pid = pid & state = state2 : {state5, state9};
        running_pid = pid & state = state3 & ((chRecv.filled & !chRecv.received)) : {state12};
        running_pid = pid & state = state4 & ((TRUE)) : {state3};
        running_pid = pid & state = state5 & ((!(chSend.filled))) : {state6};
        running_pid = pid & state = state6 & (((chSend.filled) & (chSend.received))) : {state7};
        running_pid = pid & state = state7 & ((TRUE)) : {state4};
        running_pid = pid & state = state8 & ((TRUE)) : {state3};
        running_pid = pid & state = state9 & ((!(chSend.filled))) : {state10};
        TRUE : state;
      esac;

MODULE main()
  VAR
    __pid0_chWorker1Recv : HandshakeChannel1Proxy(chWorker1Recv);
    __pid0_chWorker1Send : HandshakeChannel0Proxy(chWorker1Send);
    __pid0_chWorker2Recv : HandshakeChannel3Proxy(chWorker2Recv);
    __pid0_chWorker2Send : HandshakeChannel2Proxy(chWorker2Send);
    __pid1_chWorker1Recv : HandshakeChannel1Proxy(chWorker1Recv);
    __pid1_chWorker1Send : HandshakeChannel0Proxy(chWorker1Send);
    __pid2_chWorker2Recv : HandshakeChannel3Proxy(chWorker2Recv);
    __pid2_chWorker2Send : HandshakeChannel2Proxy(chWorker2Send);
    arbiter : __pid0_Arbiter(running_pid, 0, __pid0_chWorker1Send, __pid0_chWorker2Send, __pid0_chWorker1Recv, __pid0_chWorker2Recv);
    chWorker1Recv : HandshakeChannel1(running_pid, chWorker1Recv_filled, chWorker1Recv_received, chWorker1Recv_value_0);
    chWorker1Send : HandshakeChannel0(running_pid, chWorker1Send_filled, chWorker1Send_received, chWorker1Send_value_0);
    chWorker2Recv : HandshakeChannel3(running_pid, chWorker2Recv_filled, chWorker2Recv_received, chWorker2Recv_value_0);
    chWorker2Send : HandshakeChannel2(running_pid, chWorker2Send_filled, chWorker2Send_received, chWorker2Send_value_0);
    running_pid : {0, 1, 2};
    worker1 : __pid1_Worker(running_pid, 1, __pid1_chWorker1Recv, __pid1_chWorker1Send);
    worker2 : __pid2_Worker(running_pid, 2, __pid2_chWorker2Recv, __pid2_chWorker2Send);
  ASSIGN
    running_pid := {0, 1, 2};
  DEFINE
    chWorker1Recv_filled := [__pid0_chWorker1Recv.next_filled, __pid1_chWorker1Recv.next_filled, chWorker1Recv.filled];
    chWorker1Recv_received := [__pid0_chWorker1Recv.next_received, __pid1_chWorker1Recv.next_received, chWorker1Recv.received];
    chWorker1Recv_value_0 := [__pid0_chWorker1Recv.next_value_0, __pid1_chWorker1Recv.next_value_0, chWorker1Recv.value_0];
    chWorker1Send_filled := [__pid0_chWorker1Send.next_filled, __pid1_chWorker1Send.next_filled, chWorker1Send.filled];
    chWorker1Send_received := [__pid0_chWorker1Send.next_received, __pid1_chWorker1Send.next_received, chWorker1Send.received];
    chWorker1Send_value_0 := [__pid0_chWorker1Send.next_value_0, __pid1_chWorker1Send.next_value_0, chWorker1Send.value_0];
    chWorker2Recv_filled := [__pid0_chWorker2Recv.next_filled, chWorker2Recv.filled, __pid2_chWorker2Recv.next_filled];
    chWorker2Recv_received := [__pid0_chWorker2Recv.next_received, chWorker2Recv.received, __pid2_chWorker2Recv.next_received];
    chWorker2Recv_value_0 := [__pid0_chWorker2Recv.next_value_0, chWorker2Recv.value_0, __pid2_chWorker2Recv.next_value_0];
    chWorker2Send_filled := [__pid0_chWorker2Send.next_filled, chWorker2Send.filled, __pid2_chWorker2Send.next_filled];
    chWorker2Send_received := [__pid0_chWorker2Send.next_received, chWorker2Send.received, __pid2_chWorker2Send.next_received];
    chWorker2Send_value_0 := [__pid0_chWorker2Send.next_value_0, chWorker2Send.value_0, __pid2_chWorker2Send.next_value_0];
