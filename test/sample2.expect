
MODULE HandshakeChannel0(running_pid, filleds, receiveds, values_0)
  VAR
    filled : boolean;
    received : boolean;
    value_0 : boolean;
  ASSIGN
    init(filled) := FALSE;
    init(received) := FALSE;
    init(value_0) := FALSE;
    next(filled) := filleds[running_pid];
    next(received) := receiveds[running_pid];
    next(value_0) := values_0[running_pid];

MODULE HandshakeChannel0Proxy(ch)
  VAR
    next_filled : boolean;
    next_received : boolean;
    next_value_0 : boolean;
  DEFINE
    filled := ch.filled;
    received := ch.received;
    value_0 := ch.value_0;

MODULE __pid0_ProcA(running_pid, pid, ch0)
  VAR
    b : 0..8;
    state : {state0, state1, state2, state3};
    transition : {notrans, trans0, trans1, trans2};
  TRANS transition = trans0 -> (TRUE);
  TRANS transition = trans1 -> (!(ch0.filled));
  TRANS transition = trans2 -> ((ch0.filled) & (ch0.received));
  ASSIGN
    ch0.next_filled :=
      case
        transition = trans1 : TRUE;
        transition = trans2 : FALSE;
        TRUE : ch0.filled;
      esac;
    ch0.next_received :=
      case
        transition = trans1 : FALSE;
        TRUE : ch0.received;
      esac;
    ch0.next_value_0 :=
      case
        transition = trans1 : TRUE;
        TRUE : ch0.value_0;
      esac;
    init(state) := state0;
    next(b) :=
      case
        TRUE : b;
      esac;
    next(state) :=
      case
        transition = trans0 : state1;
        transition = trans1 : state2;
        transition = trans2 : state3;
        TRUE : state;
      esac;
    transition :=
      case
        running_pid = pid & state = state0 & ((TRUE)) : {trans0};
        running_pid = pid & state = state1 & ((!(ch0.filled))) : {trans1};
        running_pid = pid & state = state2 & (((ch0.filled) & (ch0.received))) : {trans2};
        TRUE : notrans;
      esac;

MODULE main()
  VAR
    __pid0_ch : HandshakeChannel0Proxy(ch);
    ch : HandshakeChannel0(running_pid, ch_filled, ch_received, ch_value_0);
    proc1 : __pid0_ProcA(running_pid, 0, __pid0_ch);
    running_pid : {0};
  ASSIGN
    running_pid := {0};
  DEFINE
    ch_filled := [__pid0_ch.next_filled];
    ch_received := [__pid0_ch.next_received];
    ch_value_0 := [__pid0_ch.next_value_0];
